image: python:3.8

definitions:
  services:
    docker:
      memory: 2048
    mysql:
      image: mysql:5.7
      environment:
        MYSQL_DATABASE: 'TestGestioneProgetti'
        MYSQL_ROOT_PASSWORD: $DB_PASSWORD

pipelines:
  default:
    - step:
        name: Update Requirements
        script:
          - pip install pipreqs
          - pipreqs --force .
          - git diff --exit-code requirements.txt || {
              git config --global user.email "ci-bot@example.com"
              git config --global user.name "CI Bot"
              git add requirements.txt
              git commit -m "Update requirements.txt [skip ci]"
              git push origin HEAD:$BITBUCKET_BRANCH
            }
    - parallel:
        - step:
            name: Test
            services:
              - mysql
            caches:
              - pip
            script:
              - pip install -r requirements.txt
              - echo "Current directory structure:"
              - find . -type d | sort | sed -e "s/[^-][^\/]*\//  |/g" -e "s/|\([^ ]\)/|-\1/"
              - pytest -v --junitxml=test-reports/report.xml
            after-script:
              - pip install coverage
              - coverage run -m pytest
              - coverage report
            artifacts:
              - test-reports/**
        - step:
            name: Lint
            script:
              - pip install flake8
              - flake8 . --extend-exclude=dist,build --show-source --statistics

  branches:
    main:
      - step:
          name: Test
          services:
            - mysql
          caches:
            - pip
          script:
            - pip install -r requirements.txt
            - echo "Current directory structure:"
            - find . -type d | sort | sed -e "s/[^-][^\/]*\//  |/g" -e "s/|\([^ ]\)/|-\1/"
            - pytest -v --junitxml=test-reports/report.xml
          after-script:
            - pip install coverage
            - coverage run -m pytest
            - coverage report
          artifacts:
            - test-reports/**
      - step:
          name: Build and Push Docker Image
          services:
            - docker
          script:
            - echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
            - docker build -t $DOCKER_REGISTRY/$BITBUCKET_REPO_SLUG:$BITBUCKET_COMMIT .
            - docker push $DOCKER_REGISTRY/$BITBUCKET_REPO_SLUG:$BITBUCKET_COMMIT
      - step:
          name: Local Deployment
          script:
            - echo "Pulling the latest image..."
            - docker pull $DOCKER_REGISTRY/$BITBUCKET_REPO_SLUG:$BITBUCKET_COMMIT
            - echo "Stopping and removing old container if it exists..."
            - docker stop $CONTAINER_NAME || true
            - docker rm $CONTAINER_NAME || true
            - echo "Running new container..."
            - docker run -d --name $CONTAINER_NAME -p 5000:5000 $DOCKER_REGISTRY/$BITBUCKET_REPO_SLUG:$BITBUCKET_COMMIT
            - echo "Application deployed locally. Access it at http://localhost:5000"